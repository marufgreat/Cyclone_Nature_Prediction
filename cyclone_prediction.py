# -*- coding: utf-8 -*-
"""Cyclone_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yz57O70Wbbzgyomum1nrDHL8_nlqMppC
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix


from keras.models import Sequential
from keras.layers import Dense
from keras.layers import Flatten
from keras.layers import Dropout
from keras.layers.convolutional import Conv1D
from keras.layers.convolutional import MaxPooling1D
from keras.utils import to_categorical


from google.colab import files 
uploaded = files.upload() 

import pandas as pd 
data=pd.read_csv("cyclone.csv") 
data.head() 

import matplotlib.pyplot as plt 
import tensorflow as tf 
import pandas as pd 
import numpy as np 
from sklearn.model selection import train test split 


#for encoding 

from sklearn.preprocessing import LabelEncoder
from keras.utils import np_utils

import numpy as np 
import matplotlib.pyplot as plt 
X = data.iloc[:, :-1].values 
y = data.iloc[:, 3].values 

y_train = np.asarray(data['cycl_class']) 
encoder = LabelEncoder() 
encoder.fit(y_train) 
y_train = encoder.transform(y_train) 
from sklearn.model_selection import train_test_split 
X_train, X_test, ytrain, ytest = train_test_split(X, y_train, test_size = 0.15, random_state = 42)
                                                  

print (X_train.shape, ytrain.shape) 
print (X_test.shape, ytest.shape) 

import tensorflow as tf 
from tensorflow import keras 
from keras.layers import Dense, Dropout,LSTH 

from tensorflow.python.keras.optimizers import Adam 
from keras.models import Sequential 

X_train.shape 

X_train_new = X_train.reshape(X_train.shape[0],1,X_train.shape[1]) 
X_test_new = X_test.reshape(X_test.shape[0],1,X_test.shape[1]) 
X_test_new.shape 


# convert integers to dummy variables (i.e. one hot encoded)

y_train_new = np_utils.to_categorical(ytrain) 
y_train_new = y_train_new.reshape(y_train_new.shape[0],1,y_train_new.shape) 
#print(y_train_new.shape) 

y_test_new = np_utils.to_categorical(ytest) 
y_test_new = y_test_new.reshape(y_test_new.shape[0],1,y_test_new.shape) 
#y_test_new.shape 

from tensorflow.python.keras.models import Sequential 
from tensorflow.python.keras.layers import Dense,Dropout, LSTM 
from tensorflow.python.keras.optimizers import Adam 


# IPython magic to understand Python compatibility. 

def myModel2(): 
  model = Sequential() 
  model.add(LSTM(128,input_shape=(1,X_train_new.shape[2]), return_sequences=True)) 
  model.add(LSTM(64,return_sequences=True)) 
  model.add(LSTM(16,return_sequences=True)) 
  model.add(LSTM(8,return_sequences=True)) 
  model.add(Dense(3,activation='softmax')) 
  optimizer = Adam(lr=.001) 
  model.compile(loss='categorical_crossentropy',optimizer=optimizer,metrics=['accuracy', 'mae','mse'])
  model.summary() 
  return model 


def plot_accuracy_loss(history): 
  history_dict = history.history 
  # plot loss during training 
  loss_values = history_dict['loss'] 
  val_loss_values = history_dict['val_loss'] 
  plt.subplot(211) 
  plt.title('Loss') 
  epochs = range(1, len(loss_values) + 1) 
  plt.plot(epochs,loss_values, label='Training loss') 
  plt.plot(epochs,val_loss_values, label='test/Validation loss') 
  plt.xlabel('Epochs') 
  plt.ylabel('Loss') 
  plt.legend() 
  
  # plot accuracy during training 
  acc_values = history_dict['acc'] 
  val_acc_values = history_dict['val_acc'] 
  plt.subplot(212) 
  plt.title('Accuracy') 
  epochs = range(1, len(acc_values) + 1) 
  plt.plot(epochs,acc_values, label='train accuracy') 
  plt.plot(epochs,val_acc_values, label='test/Validation accuracy') 
  plt.legend() 
  plt.show() 

def acc_on_train(x,y,model): 
  #    %%time 
  result = model.evaluate(x, y,verbose=0) 
  print("Accuracy on trian data: {0:.2%}".format(result[1])) 
  print("MAE on train data: {0:.2%}".format(result[2])) 
  print("MSE on train data: {0:.2%}".format(result[3])) 
  print("\n") 

def acc_on_test(x,y,model): 
  #   %%time 
  result = model.evaluate(x, y,verbose=0) 
  print("Accuracy on test data: {0:.2%}".format(result[1])) 
  print("MAE on test data: {0:.2%}".format(result[2])) 
  print("MSE on test data: {0:.2%}".format(result[3])) 
  print("\n")


model = myModel2()


history = model.fit(X_train_new, y_train_new, epochs=20, validation_data=(X_test_new, y_test_new), batch_size=16)

from keras.backend import tf as model 

# evaluate the model 
acc_on_train(X_train_new,y_train_new,model) 
acc_on_test(X_test_new,y_test_new,model) 
plot_accuracy_loss(history)

